#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int Time = 0;//表示作业调度的运行时间
int select = 0;//选择调度算法
int CPUresource = 10;
int index = 1;
int n = 2;
typedef struct JCB {
	string name;
	int hasRunTime=0;
	int runTime=0;//所需运行时间
	int resource;//所占资源
	int subTime;//提交时刻
	int startTime;//开始运行时刻
	int finishTime;//结束运行时刻
	int turnoverTime;//周转时间
	int rightTime;//带权周转时间
	char state='w';
	float resRatio;//响应比
	struct JCB* prior;
	struct  JCB* next;
	JCB* operator =(JCB* p2) {
		this->name = p2->name;
		this->hasRunTime = p2->hasRunTime;
		this->resource = p2->resource;
		this->runTime = p2->runTime;
		this->subTime = p2->subTime;
		this->startTime = p2->startTime;
		p2->prior = this->prior;
		p2->next = this->next;
		return this;
	}
}Elem,*Elemtype;

typedef struct ReadyQueue {
	int n;//n道处理系统
	struct JCB* prior;
	struct JCB* next;
}*ReadyHead;
ReadyHead ready_q=new ReadyQueue();
Elemtype removeH(ReadyHead ready) {
	Elemtype p = ready->next;
	if (p == NULL) exit(1);
	ready->next = p->next;
	p->prior = NULL;
	p->next = NULL;
	return p;
}
class Queue {
public:
	Queue() { JCBHead = new Elem();	size = 0; }
	Queue (int n) {
		size = n;
		JCBHead = new Elem();
		fstream JCBFile;
		JCBFile.open("JCB.txt");
		JCB* p = JCBHead;
		for (int i = 0; i < n; i++) {
			Time++;
			JCB* j = new JCB();
			JCBFile >> j->name;
			JCBFile >> j->runTime;
			JCBFile >> j->resource;
			j->subTime = Time;
			j->next = NULL;
			p->next = j;
			j->prior = p;
			p = p->next;
		}
		JCBFile.close();
	}
	void Push(Elemtype j){
		if (j == NULL) {
			cout << "输入为空";
			return;
		}
		size++;
		Elemtype p = JCBHead;
		while (p->next != NULL) {
			p = p->next;
		}
		j->next = p->next;
		j->prior = p;
		p->next = j;
		
	}
	Elemtype Pop() {
		if (JCBHead->next == NULL) {
			cout << "队列空，无法删除";
			return 0;
		}
		size--;
		Elemtype p = JCBHead->next;
		JCBHead->next = p->next;
		if(p->next!=NULL)
			p->next->prior = JCBHead;
		p->prior = NULL;
		p->next = NULL;
		return p;
	}
	Elemtype Remove(Elemtype j) {
		if(j->next!=NULL)j->next->prior = j->prior;
		j->prior->next = j->next;
		j->prior = NULL;
		j->next = NULL;
		return j;
	}
	Elemtype GetEnd() {
		return JCBHead->next;
	}
	//最短作业优先排序算法
	void SJF() {
		Elemtype p1 = JCBHead->next;
		Elemtype p2 = p1->next;
		for (int i = 0;i < size - 1;i++) {
			p1 = JCBHead->next;
			p2 = p1->next;
			while (p2 != NULL) {
				if (p1->runTime > p2->runTime) {
					p1->next = p2->next;
					if(p2->next!=NULL)
						p2->next->prior = p1;
					p2->prior = p1->prior;
					p1->prior->next = p2;
					p2->next = p1;
					p1->prior = p2;

					p2 = p1->next;
				}
				else {
					p1 = p1->next;
					p2 = p2->next;
				}
			}
		}
	}
	//计算每个作业的响应比
	void HRNindi() {
		Elemtype p = JCBHead->next;
		for (int i = 0;i < size;i++) {
			p->turnoverTime = i + p->runTime;
			p->resRatio = p->turnoverTime / p->runTime;
			p = p->next;
		}
	}
	//响应比高着优先排序算法
	void HRN() {
		HRNindi();
		Elemtype p1 = JCBHead->next;
		Elemtype p2 = p1->next;
		for (int i = 0;i < size - 1;i++) {
			p1 = JCBHead->next;
			p2 = p1->next;
			while (p2 != NULL) {
				if (p1->resRatio < p2->resRatio) {
					p1->next = p2->next;
					if (p2->next != NULL)
						p2->next->prior = p1;
					p2->prior = p1->prior;
					p1->prior->next = p2;
					p2->next = p1;
					p1->prior = p2;

					p2 = p1->next;
				}
				else {
					p1 = p1->next;
					p2 = p2->next;
				}
			}
		}
	}
	Elemtype JCBHead;
	int averTurnoverTime;//这组作业的平均周转时间
	int averRightTime;//这组作业的带权平均周转时间
	int size;
};

//void Running(Queue &JCBwait) {
//	cout << "ID	" << "开始运行时刻    " << "结束运行时刻    " << "周转运行时间    " << "带权周转运行时间    " <<"所占资源    "<< endl;
//	do{
//		if (JCBwait.JCBHead->next!=NULL) {
//			Elemtype q = new Elem();
//			if (ready_q->next == NULL) {
//				ready_q->next = JCBwait.Pop();
//				q = ready_q->next;
//				for (int i = 0; i < JCBwait.size - 1; i++) {
//					q->next = JCBwait.Pop();
//					q = q->next;
//				}
//			}
//			else {
//				q = ready_q->next;
//				while (q->next != NULL) {
//					q = q->next;
//				}
//				q->next = JCBwait.Pop();
//			}
//		}
//		Elemtype j = ready_q->next;
//		j->state = 'r';
//		j->startTime = Time;
//		j->finishTime = j->startTime + j->runTime;
//		j->turnoverTime = j->finishTime - j->subTime;
//		j->rightTime = j->turnoverTime / j->runTime;
//		Time += j->runTime;
//
//		JCBwait.averTurnoverTime += j->turnoverTime;
//		JCBwait.averRightTime += j->rightTime;
//		cout << j->name << "    " << j->startTime << "                " << j->finishTime << "                " << j->turnoverTime << "                " << j->rightTime << "                " << j->resource << endl;
//		removeH(ready_q);
//		if(select==2&&JCBwait.size>1)
//			JCBwait.HRN();
//	} while (ready_q->next != NULL);
//}

void Running(Queue& JCBwait) {
	cout << "ID	" << "开始运行时刻    " << "结束运行时刻    " << "周转运行时间    " << "带权周转运行时间    " << "所占资源    " << endl;
	Queue subJCB;
	int res = CPUresource;
	bool isLoad = false;
	for (int i = 0; i < n ; i++) {
		res -= JCBwait.JCBHead->next->resource;
		subJCB.Push(JCBwait.Pop());
	}
	while (subJCB.JCBHead->next!=NULL) {
		for (Elemtype p = subJCB.JCBHead->next; p != NULL;p=p->next) {
			Time += index;
			p->hasRunTime += index;
			if (p->hasRunTime >= p->runTime) {
				p->state = 'r';
				p->startTime = Time-p->hasRunTime;
				p->finishTime = Time;
				p->turnoverTime = p->finishTime - p->subTime;
				p->rightTime = p->turnoverTime / p->hasRunTime;
				JCBwait.averTurnoverTime += p->turnoverTime;
				JCBwait.averRightTime += p->rightTime;
				cout << p->name << "    " << p->startTime << "                " << p->finishTime << "                " << p->turnoverTime << "                " << p->rightTime << "                " << p->resource << endl;
				res += p->resource;
				subJCB.size--;
				if(JCBwait.JCBHead->next!=NULL){
					for (int i = 0; i < n - subJCB.size; i++) {
						if (JCBwait.JCBHead->next->resource <= res) {
							p = p->operator=(JCBwait.Pop());
							res -= p->resource;
							subJCB.size++;
							isLoad = true;
							break;
						}
					}
				}
				if (!isLoad) {
					subJCB.Remove(p);
				}
				isLoad = false;
			}
		}
	}
}
int main() {
	cout << "共几道程序系统：";
	cin >> n;
	//cout << "选择作业调度算法(0为FCFS，1为SJF，2为HRN)：";
	//cin >> select;
	Queue JCBwaitQueue(5);
	//if(select==1)
	//	JCBwaitQueue.SJF();
	//else if(select==2)
	//	JCBwaitQueue.HRN();
	Running(JCBwaitQueue);
	cout << "这组作业的平均周转时间为：" << JCBwaitQueue.averTurnoverTime << endl;
	cout << "这组作业的带权平均周转时间为：" << JCBwaitQueue.averRightTime << endl;
	return 0;
}
